// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApplication_QuizAPI.Data;

#nullable disable

namespace QuizApplication_QuizAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524051659_AddSeedUserAnswerTableToDb")]
    partial class AddSeedUserAnswerTableToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.AnswerOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");

                    b.HasData(
                        new
                        {
                            OptionId = 1,
                            IsCorrect = true,
                            OptionText = "HyperText Markup Language",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 2,
                            IsCorrect = false,
                            OptionText = "High Tech Modern Language",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 3,
                            IsCorrect = false,
                            OptionText = "Home Tool Markup Language",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 4,
                            IsCorrect = false,
                            OptionText = "Hyperlink and Text Markup Language",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 5,
                            IsCorrect = false,
                            OptionText = "HTML",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 6,
                            IsCorrect = false,
                            OptionText = "CSS",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 7,
                            IsCorrect = true,
                            OptionText = "JavaScript",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 8,
                            IsCorrect = false,
                            OptionText = "XML",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 9,
                            IsCorrect = false,
                            OptionText = "16",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 10,
                            IsCorrect = true,
                            OptionText = "11",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 11,
                            IsCorrect = false,
                            OptionText = "13",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 12,
                            IsCorrect = false,
                            OptionText = "10",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 13,
                            IsCorrect = true,
                            OptionText = "//",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 14,
                            IsCorrect = false,
                            OptionText = "/*",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 15,
                            IsCorrect = false,
                            OptionText = "#",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 16,
                            IsCorrect = false,
                            OptionText = "--",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 17,
                            IsCorrect = false,
                            OptionText = "Computer Style Sheets",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 18,
                            IsCorrect = true,
                            OptionText = "Cascading Style Sheets",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 19,
                            IsCorrect = false,
                            OptionText = "Creative Style Sheets",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 20,
                            IsCorrect = false,
                            OptionText = "Colorful Style Sheets",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 21,
                            IsCorrect = true,
                            OptionText = "Abstract class can have implementation, interface cannot",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 22,
                            IsCorrect = false,
                            OptionText = "Interface can have implementation, abstract class cannot",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 23,
                            IsCorrect = false,
                            OptionText = "They are exactly the same",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 24,
                            IsCorrect = false,
                            OptionText = "Abstract class is faster than interface",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 25,
                            IsCorrect = true,
                            OptionText = "sealed",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 26,
                            IsCorrect = false,
                            OptionText = "static",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 27,
                            IsCorrect = false,
                            OptionText = "final",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 28,
                            IsCorrect = false,
                            OptionText = "override",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 29,
                            IsCorrect = true,
                            OptionText = "A design pattern for loose coupling",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 30,
                            IsCorrect = false,
                            OptionText = "A way to inject SQL commands",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 31,
                            IsCorrect = false,
                            OptionText = "A security vulnerability",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 32,
                            IsCorrect = false,
                            OptionText = "A debugging technique",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 33,
                            IsCorrect = false,
                            OptionText = "List<T>",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 34,
                            IsCorrect = false,
                            OptionText = "Dictionary<T,K>",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 35,
                            IsCorrect = true,
                            OptionText = "ConcurrentDictionary<T,K>",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 36,
                            IsCorrect = false,
                            OptionText = "ArrayList",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 37,
                            IsCorrect = true,
                            OptionText = "Create, Read, Update, Delete",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 38,
                            IsCorrect = false,
                            OptionText = "Copy, Read, Update, Delete",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 39,
                            IsCorrect = false,
                            OptionText = "Create, Retrieve, Update, Delete",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 40,
                            IsCorrect = false,
                            OptionText = "Create, Read, Upload, Download",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 41,
                            IsCorrect = false,
                            OptionText = "GET",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 42,
                            IsCorrect = true,
                            OptionText = "SELECT",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 43,
                            IsCorrect = false,
                            OptionText = "RETRIEVE",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 44,
                            IsCorrect = false,
                            OptionText = "FETCH",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 45,
                            IsCorrect = true,
                            OptionText = "A key from another table that creates relationship",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 46,
                            IsCorrect = false,
                            OptionText = "A key from foreign country",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 47,
                            IsCorrect = false,
                            OptionText = "A encrypted key for security",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 48,
                            IsCorrect = false,
                            OptionText = "A backup key",
                            QuestionId = 12
                        });
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionText = "What does HTML stand for?",
                            QuizId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionText = "Which of the following is a programming language?",
                            QuizId = 1
                        },
                        new
                        {
                            QuestionId = 3,
                            QuestionText = "What is the result of 5 + 3 * 2?",
                            QuizId = 1
                        },
                        new
                        {
                            QuestionId = 4,
                            QuestionText = "Which symbol is used for single-line comments in C#?",
                            QuizId = 1
                        },
                        new
                        {
                            QuestionId = 5,
                            QuestionText = "What does CSS stand for?",
                            QuizId = 1
                        },
                        new
                        {
                            QuestionId = 6,
                            QuestionText = "What is the difference between abstract class and interface?",
                            QuizId = 2
                        },
                        new
                        {
                            QuestionId = 7,
                            QuestionText = "Which keyword is used to prevent method overriding?",
                            QuizId = 2
                        },
                        new
                        {
                            QuestionId = 8,
                            QuestionText = "What is dependency injection?",
                            QuizId = 2
                        },
                        new
                        {
                            QuestionId = 9,
                            QuestionText = "Which collection is thread-safe in C#?",
                            QuizId = 2
                        },
                        new
                        {
                            QuestionId = 10,
                            QuestionText = "What does CRUD stand for?",
                            QuizId = 3
                        },
                        new
                        {
                            QuestionId = 11,
                            QuestionText = "Which SQL command is used to retrieve data?",
                            QuizId = 3
                        },
                        new
                        {
                            QuestionId = 12,
                            QuestionText = "What is a foreign key?",
                            QuizId = 3
                        });
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<decimal>("PassingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TimeLimitMinute")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            QuizId = 1,
                            PassingScore = 60.00m,
                            QuizTitle = "Basic Programming Knowledge",
                            TimeLimitMinute = 10,
                            TotalQuestion = 5
                        },
                        new
                        {
                            QuizId = 2,
                            PassingScore = 75.00m,
                            QuizTitle = "Advanced C# Concepts",
                            TimeLimitMinute = 15,
                            TotalQuestion = 4
                        },
                        new
                        {
                            QuizId = 3,
                            PassingScore = 70.00m,
                            QuizTitle = "Database Fundamentals",
                            TimeLimitMinute = 8,
                            TotalQuestion = 3
                        });
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.QuizAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttemptId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId", "QuizId", "CreatedAt");

                    b.ToTable("QuizAttempts");

                    b.HasData(
                        new
                        {
                            AttemptId = 1,
                            CreatedAt = new DateTime(2025, 5, 24, 10, 16, 57, 908, DateTimeKind.Local).AddTicks(6304),
                            EndTime = new DateTime(2025, 5, 24, 10, 25, 27, 907, DateTimeKind.Local).AddTicks(8492),
                            Passed = true,
                            QuizId = 1,
                            Score = 80.00m,
                            StartTime = new DateTime(2025, 5, 24, 10, 16, 57, 890, DateTimeKind.Local).AddTicks(4953),
                            UserId = 1
                        },
                        new
                        {
                            AttemptId = 2,
                            CreatedAt = new DateTime(2025, 5, 24, 11, 46, 57, 908, DateTimeKind.Local).AddTicks(6488),
                            Passed = false,
                            QuizId = 1,
                            Score = 0.00m,
                            StartTime = new DateTime(2025, 5, 24, 11, 46, 57, 908, DateTimeKind.Local).AddTicks(6485),
                            UserId = 2
                        },
                        new
                        {
                            AttemptId = 3,
                            CreatedAt = new DateTime(2025, 5, 24, 11, 16, 57, 908, DateTimeKind.Local).AddTicks(6494),
                            EndTime = new DateTime(2025, 5, 24, 11, 29, 12, 908, DateTimeKind.Local).AddTicks(6491),
                            Passed = false,
                            QuizId = 2,
                            Score = 50.00m,
                            StartTime = new DateTime(2025, 5, 24, 11, 16, 57, 908, DateTimeKind.Local).AddTicks(6490),
                            UserId = 3
                        },
                        new
                        {
                            AttemptId = 4,
                            CreatedAt = new DateTime(2025, 5, 24, 11, 46, 57, 908, DateTimeKind.Local).AddTicks(6497),
                            Passed = false,
                            QuizId = 2,
                            Score = 0.00m,
                            StartTime = new DateTime(2025, 5, 24, 11, 46, 57, 908, DateTimeKind.Local).AddTicks(6495),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "quytt@gmail.com",
                            Username = "quy"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "datdt@gmail.com",
                            Username = "dat"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "sangtt@gmail.com",
                            Username = "sang"
                        });
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<int>("AttemptId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOptionId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("UserAnswers");

                    b.HasData(
                        new
                        {
                            UserAnswerId = 3,
                            AttemptId = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            SelectedOptionId = 1
                        },
                        new
                        {
                            UserAnswerId = 4,
                            AttemptId = 1,
                            IsCorrect = true,
                            QuestionId = 2,
                            SelectedOptionId = 7
                        },
                        new
                        {
                            UserAnswerId = 5,
                            AttemptId = 1,
                            IsCorrect = true,
                            QuestionId = 3,
                            SelectedOptionId = 10
                        },
                        new
                        {
                            UserAnswerId = 6,
                            AttemptId = 1,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedOptionId = 13
                        },
                        new
                        {
                            UserAnswerId = 7,
                            AttemptId = 1,
                            IsCorrect = false,
                            QuestionId = 5,
                            SelectedOptionId = 17
                        });
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.AnswerOption", b =>
                {
                    b.HasOne("QuizApplication_QuizAPI.Models.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.Question", b =>
                {
                    b.HasOne("QuizApplication_QuizAPI.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.QuizAttempt", b =>
                {
                    b.HasOne("QuizApplication_QuizAPI.Models.Quiz", "Quiz")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApplication_QuizAPI.Models.User", "User")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.UserAnswer", b =>
                {
                    b.HasOne("QuizApplication_QuizAPI.Models.QuizAttempt", "QuizAttempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApplication_QuizAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizApplication_QuizAPI.Models.AnswerOption", "SelectedOption")
                        .WithMany("UserAnswers")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.AnswerOption", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.Question", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizAttempts");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.QuizAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizApplication_QuizAPI.Models.User", b =>
                {
                    b.Navigation("QuizAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
